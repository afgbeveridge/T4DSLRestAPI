
// ************************************************************************************************************************
//
// IMPORTANT NOTE:
// This file has been auto generated. Modifications by hand will be overwritten the next time the T4 template is processed
//
// ************************************************************************************************************************
 
//
// Generation date: Friday, 30 December 2016 at 8:57:15 PM
// Machine name: TONY-PC
// DSL path: C:\Projects\Personal\GitHub\T4DSLRestAPI\DSL-T4\dsl-instance.json
//



 using System;
 using System.Linq;
 using System.Linq.Expressions;
 using System.Collections.Generic;
 using Microsoft.EntityFrameworkCore;
 using System.Threading.Tasks;
 using System.Reflection;
 using System.Dynamic;
  using EF.Model;
 
 namespace Complex.Omnibus.Autogenerated.ExpansionHandling {

    public abstract class BaseQueryHandling {

        protected const string NameSeparator = "_";

        protected async Task<IEnumerable<TResult>> GetMultipleObjectsWithExpansion<TResult, TEntity>(BloggingContext ctx, Expression<Func<TEntity, bool>> expr, IEnumerable<string> expansions, int top, int skip) {
			var expand = expansions ?? Enumerable.Empty<string>();
			// .NET Core does not supply the ToTitleCase behaviour, hence this
			expand = expand.Select(e => e.Substring(0, 1).ToUpper() + e.Substring(1).ToLower());
            if (!expand.All(SupportedExpansions.Contains))
                throw new Exception("Unknown expansion(s) supplied: " + string.Join(",", expand.Except(SupportedExpansions)));
			var name = "Get" + NameSeparator + TagName +
                        (expand.Any() ? NameSeparator : string.Empty) + string.Join(NameSeparator, expand.OrderBy(s => s));
            return await ((Task<IEnumerable<TResult>>)
                        GetType()
                        .GetMethod(name, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance)
                        .Invoke(this, new object[] { ctx, (expr ?? (entity => true)), Math.Max(1, top), Math.Max(0, skip) }));
        }

        protected async Task<TResult> GetSingleObjectWithExpansion<TResult, TEntity>(BloggingContext ctx, Expression<Func<TEntity, bool>> expr, IEnumerable<string> expansions) {
            return (await GetMultipleObjectsWithExpansion<TResult, TEntity>(ctx, expr, expansions, int.MaxValue, 0)).FirstOrDefault();
        }

		protected abstract string TagName { get; }

		public abstract IEnumerable<string> SupportedExpansions { get; }

    }

	internal static class ResultClassHelper { 
		
		internal static IEnumerable<dynamic> Amalgamate<TResult>(IEnumerable<TResult> results, string modelName) { 
			return results.Select(r => Amalgamate(r, modelName)).ToArray();
		}

		internal static dynamic Amalgamate(object result, string modelName) {
			dynamic origin = new ExpandoObject();
			IDictionary<string, object> res = origin as IDictionary<string, object>;
			// Get the root property
			var root = result.GetType().GetProperty(modelName).GetValue(result);
			root.GetType().GetProperties().ToList().ForEach(p => res[p.Name] = p.GetValue(root));
			result.GetType().GetProperties().Where(p => p.Name != modelName).ToList().ForEach(p => res[p.Name] = p.GetValue(result));
			return origin;
		}
	}
}

#region Blogs

 namespace Complex.Omnibus.Autogenerated.ExpansionHandling.Blogs { 

 public class CompositeBlog : Blog { 
		public Party Author { get; set; }
		public IEnumerable<Post> Posts { get; set; }
		public IEnumerable<Party> Readers { get; set; }
		
	public static CompositeBlog Accept(Blog blog,Party author = null,IEnumerable<Post> posts = null,IEnumerable<Party> readers = null) { 
		var result = new CompositeBlog();
		// Now some simple code to copy properties of the inbound model class to the result class
		typeof(Blog).GetProperties().Where(info => info.CanWrite)
                    .ToList().ForEach(inf => typeof(CompositeBlog).GetProperty(inf.Name).SetValue(result, inf.GetValue(blog)));
		result.Author = author;
result.Posts = posts;
result.Readers = readers;
		return result;
	}

 }

 
 public partial class BlogsQueryHandler : BaseQueryHandling { 

	protected override string TagName { get; } = "Blogs";

	public const string ExpandPosts = "Posts";
	public const string ExpandAuthor = "Author";
	public const string ExpandReaders = "Readers";
	
	public override IEnumerable<string> SupportedExpansions { get; } = new [] { "Posts", "Author", "Readers"};

	
	private async Task<IEnumerable<CompositeBlog>> Get_Blogs(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })


                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog));
	}


	private async Task<IEnumerable<CompositeBlog>> Get_Blogs_Posts(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })
                .GroupJoin(ctx.Posts, a => a.Blog.NonKeyField, post => post.NonKeyField, (a, posts) => new { a.Blog, Posts = posts})

                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog, posts: a.Posts));
	}


	private async Task<IEnumerable<CompositeBlog>> Get_Blogs_Author(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })
                .Join(ctx.Parties, a => a.Blog.NonKeyField, party => party.NonKeyField, (a, author) => new { a.Blog, Author = author})
                .Where(p => p.Author.Disposition == "author")
                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog, author: a.Author));
	}


	private async Task<IEnumerable<CompositeBlog>> Get_Blogs_Author_Posts(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })
                .Join(ctx.Parties, a => a.Blog.NonKeyField, party => party.NonKeyField, (a, author) => new { a.Blog, Author = author})
                .GroupJoin(ctx.Posts, a => a.Blog.NonKeyField, post => post.NonKeyField, (a, posts) => new { a.Blog, a.Author, Posts = posts})
                .Where(p => p.Author.Disposition == "author")
                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog, author: a.Author,posts: a.Posts));
	}


	private async Task<IEnumerable<CompositeBlog>> Get_Blogs_Readers(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })
                .GroupJoin(ctx.Parties.Where(r => r.Disposition == "reader"), a => a.Blog.NonKeyField, party => party.NonKeyField, (a, readers) => new { a.Blog, Readers = readers})

                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog, readers: a.Readers));
	}


	private async Task<IEnumerable<CompositeBlog>> Get_Blogs_Posts_Readers(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })
                .GroupJoin(ctx.Posts, a => a.Blog.NonKeyField, post => post.NonKeyField, (a, posts) => new { a.Blog, Posts = posts})
                .GroupJoin(ctx.Parties.Where(r => r.Disposition == "reader"), a => a.Blog.NonKeyField, party => party.NonKeyField, (a, readers) => new { a.Blog, a.Posts, Readers = readers})

                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog, posts: a.Posts,readers: a.Readers));
	}


	private async Task<IEnumerable<CompositeBlog>> Get_Blogs_Author_Readers(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })
                .Join(ctx.Parties, a => a.Blog.NonKeyField, party => party.NonKeyField, (a, author) => new { a.Blog, Author = author})
                .GroupJoin(ctx.Parties.Where(r => r.Disposition == "reader"), a => a.Blog.NonKeyField, party => party.NonKeyField, (a, readers) => new { a.Blog, a.Author, Readers = readers})
                .Where(p => p.Author.Disposition == "author")
                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog, author: a.Author,readers: a.Readers));
	}


	private async Task<IEnumerable<CompositeBlog>> Get_Blogs_Author_Posts_Readers(BloggingContext ctx, Expression<Func<Blog, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Blogs
                .AsNoTracking()
                .Where(expr)
                .Select(b => new { Blog = b })
                .Join(ctx.Parties, a => a.Blog.NonKeyField, party => party.NonKeyField, (a, author) => new { a.Blog, Author = author})
                .GroupJoin(ctx.Posts, a => a.Blog.NonKeyField, post => post.NonKeyField, (a, posts) => new { a.Blog, a.Author, Posts = posts})
                .GroupJoin(ctx.Parties.Where(r => r.Disposition == "reader"), a => a.Blog.NonKeyField, party => party.NonKeyField, (a, readers) => new { a.Blog, a.Author, a.Posts, Readers = readers})
                .Where(p => p.Author.Disposition == "author")
                .OrderBy(a => a.Blog.BlogId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositeBlog.Accept(a.Blog, author: a.Author,posts: a.Posts,readers: a.Readers));
	}


	public async Task<IEnumerable<CompositeBlog>> GetBlogsWithExpansion(BloggingContext ctx, Expression<Func<Blog, bool>> expr = null, int top = 10, int skip = 0, IEnumerable<string> expansions = null) { 
		return await GetMultipleObjectsWithExpansion<CompositeBlog, Blog>(ctx, expr, expansions, top, skip);
	}

	public async Task<CompositeBlog> GetBlogWithExpansion(BloggingContext ctx, Expression<Func<Blog, bool>> expr, IEnumerable<string> expansions = null) { 
	    return await GetSingleObjectWithExpansion<CompositeBlog, Blog>(ctx, expr, expansions);
	}
}

 }
 #endregion

#region Posts

 namespace Complex.Omnibus.Autogenerated.ExpansionHandling.Posts { 

 public class CompositePost : Post { 
		public IEnumerable<Party> Readers { get; set; }
		
	public static CompositePost Accept(Post post,IEnumerable<Party> readers = null) { 
		var result = new CompositePost();
		// Now some simple code to copy properties of the inbound model class to the result class
		typeof(Post).GetProperties().Where(info => info.CanWrite)
                    .ToList().ForEach(inf => typeof(CompositePost).GetProperty(inf.Name).SetValue(result, inf.GetValue(post)));
		result.Readers = readers;
		return result;
	}

 }

 
 public partial class PostsQueryHandler : BaseQueryHandling { 

	protected override string TagName { get; } = "Posts";

	public const string ExpandReaders = "Readers";
	
	public override IEnumerable<string> SupportedExpansions { get; } = new [] { "Readers"};

	
	private async Task<IEnumerable<CompositePost>> Get_Posts(BloggingContext ctx, Expression<Func<Post, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Posts
                .AsNoTracking()
                .Where(expr)
                .Select(p => new { Post = p })


                .OrderBy(a => a.Post.PostId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositePost.Accept(a.Post));
	}


	private async Task<IEnumerable<CompositePost>> Get_Posts_Readers(BloggingContext ctx, Expression<Func<Post, bool>> expr, int top, int skip) { 
		return 
                (await ctx.Posts
                .AsNoTracking()
                .Where(expr)
                .Select(p => new { Post = p })
                .GroupJoin(ctx.Parties.Where(r => r.Disposition == "reader"), a => a.Post.NonKeyField, party => party.NonKeyField, (a, readers) => new { a.Post, Readers = readers})

                .OrderBy(a => a.Post.PostId)
                .Skip(skip)
                .Take(top)
                .ToListAsync())
                .Select(a => CompositePost.Accept(a.Post, readers: a.Readers));
	}


	public async Task<IEnumerable<CompositePost>> GetPostsWithExpansion(BloggingContext ctx, Expression<Func<Post, bool>> expr = null, int top = 10, int skip = 0, IEnumerable<string> expansions = null) { 
		return await GetMultipleObjectsWithExpansion<CompositePost, Post>(ctx, expr, expansions, top, skip);
	}

	public async Task<CompositePost> GetPostWithExpansion(BloggingContext ctx, Expression<Func<Post, bool>> expr, IEnumerable<string> expansions = null) { 
	    return await GetSingleObjectWithExpansion<CompositePost, Post>(ctx, expr, expansions);
	}
}

 }
 #endregion

//
// Source DSL
// This is the content of the DSL type file that generated the above code
//
// {
//   "context": { },
//   "allDefinitions": [
//     {
//       "tag": "Blogs",
//       "singular": "Blog",
//       "model": "Blog",
//       "queryDetails": {
//         "query": "(await ctx.Blogs\r\n.AsNoTracking()\r\n.Where(expr)\r\n.Select(b => new { Blog = b })\r\n{joins}\r\n{extraWhere}\r\n.OrderBy(a => a.Blog.BlogId)\r\n.Skip(skip)\r\n.Take(top)\r\n.ToListAsync())",
//         "restResourceIdProperty": "BlogId",
//         "restResourceIdPropertyType": "int"
//       },
//       "rawExpansions": {
//         "Posts": {
//           "type": "IEnumerable<Post>",
//           "join": ".GroupJoin(ctx.Posts, a => a.Blog.NonKeyField, post => post.NonKeyField, {selector})"
//         },
//         "Author": {
//           "type": "Party",
//           "join": ".Join(ctx.Parties, a => a.Blog.NonKeyField, party => party.NonKeyField, {selector})",
//           "predicate": ".Where(p => p.Author.Disposition == \"author\")"
//         },
//         "Readers": {
//           "type": "IEnumerable<Party>",
//           "join": ".GroupJoin(ctx.Parties.Where(r => r.Disposition == \"reader\"), a => a.Blog.NonKeyField, party => party.NonKeyField, {selector})"
//         }
//       }
//     },
//     {
//       "tag": "Posts",
//       "singular": "Post",
//       "model": "Post",
//       "queryDetails": {
//         "query": "(await ctx.Posts\r\n.AsNoTracking()\r\n.Where(expr)\r\n.Select(p => new { Post = p })\r\n{joins}\r\n{extraWhere}\r\n.OrderBy(a => a.Post.PostId)\r\n.Skip(skip)\r\n.Take(top)\r\n.ToListAsync())",
//         "restResourceIdProperty": "PostId",
//         "restResourceIdPropertyType": "int"
//       },
//       "rawExpansions": {
//         "Readers": {
//           "type": "IEnumerable<Party>",
//           "join": ".GroupJoin(ctx.Parties.Where(r => r.Disposition == \"reader\"), a => a.Post.NonKeyField, party => party.NonKeyField, {selector})"
//         }
//       }
//     }
//   ]
// }

