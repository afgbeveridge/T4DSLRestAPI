<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>

<#@ assembly name="$(SolutionDir)DSLSupport\bin\Debug\net46\DSLSupport.dll" #>
<#@ import namespace="DSLSupport" #>
<#
// ****** Options for generation ****** 
// Namespaces to include (for EF model and so on)
var includeNamespaces = new List<string> { "EF.Model" };
// The type of the EF context
var contextType = "BloggingContext"; 
// Base namespace for all generated objects
var baseNamespace = "Complex.Omnibus.Autogenerated.ExpansionHandling";
// The DSL instance file extension of interest (txt or json)
var srcFormat = "json";
// True i the advanced form of a DSL instance template should be used
var useAdvancedFormDSL = false;
// Form the dsl instance file name to use
var dslFile = "dsl-instance" + (useAdvancedFormDSL ? "-advanced" : string.Empty) + ".";
// Default top if none supplied
var defaultTop = 10;
// Default skip if none supplied
var defaultSkip = 0;
// True if the expansions passed in shold be checked
var checkExpansions = true;
// If true, then expansions should be title cased e.g. posts should be Posts, readers should be Readers and so on
var expansionsAreTitleCased = true;
// Separates distinct parts of a generated method name
var nameSeparator = "_";
// The beginning characters of a generated method name
var methodNameStart  = "Get";
// Whether to include generation date etc
var includeMetadata = true;
// ****** Options for generation ****** 
#>
<#
string dslPath = Host.ResolvePath(dslFile + srcFormat);
#>
// ************************************************************************************************************************
//
// IMPORTANT NOTE:
// This file has been auto generated. Modifications by hand will be overwritten the next time the T4 template is processed
//
// ************************************************************************************************************************
<# if (includeMetadata) { #> 
//
// Generation date: <#= DateTime.Now.ToLongDateString() #> at <#= DateTime.Now.ToLongTimeString() #>
// Machine name: <#= Environment.MachineName #>
// DSL path: <#= dslPath #>
//
<# } #>
<#
	var parser = srcFormat == "txt" ? new FlatDSLFormatParser() : (IDSLParser) new JsonFormatDSLParser();
	DSLProcessor processor = null;
	string exceptionMessage = null;
	try { 
		processor = new DSLProcessor(parser, nameSeparator, methodNameStart)
						.UseFile(dslPath);
	}
	catch (Exception ex) { 
		exceptionMessage = ex.ToString();
	}
#>
