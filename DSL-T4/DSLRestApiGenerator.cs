
// ************************************************************************************************************************
//
// IMPORTANT NOTE:
// This file has been auto generated. Modifications by hand will be overwritten the next time the T4 template is processed
//
// ************************************************************************************************************************
 
//
// Generation date: Friday, 30 December 2016 at 9:00:19 PM
// Machine name: TONY-PC
// DSL path: C:\Projects\Personal\GitHub\T4DSLRestAPI\DSL-T4\dsl-instance.json
//



using System;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Net;
using DSLT4Support;
using System.Linq.Expressions;
using EF.Model;

 namespace Complex.Omnibus.Autogenerated.ExpansionHandling {

   	public class BaseController<THandler> : Controller where THandler : new() {

		protected const int DefaultTop = 10;
		protected const int DefaultSkip = 0;

		/// <summary>
        /// Public constructor that is injected with a context instance
        /// </summary>
        /// <param name="ctx">an EF context</param>
        public BaseController(BloggingContext ctx) {
            Context = ctx;
        }

		protected BloggingContext Context { get; private set; }

		protected THandler Handler() { 
			return new THandler();
		}

		protected Expression<Func<TEntity, bool>> CreatePredicate<TEntity>(object id, string propertyName) { 
			ParameterExpression p = Expression.Parameter(typeof(TEntity), "obj");
			MemberExpression m = Expression.Property(p, propertyName);
			ConstantExpression constant = Expression.Constant(id, id.GetType());
			BinaryExpression body = Expression.Equal(m, constant);
			return Expression.Lambda<Func<TEntity, bool>>(body, new[] { p });
		}

		// This is included to allow for a simple 'one place' replacement of the IActionResult that is returned
		protected IActionResult FormResult(object data) { 
			return new ObjectResult(data);
		}

	}
}

#region Blogs

 namespace Complex.Omnibus.Autogenerated.ExpansionHandling.Blogs { 

    [Route("api/[controller]")]
    public class BlogsController : BaseController<BlogsQueryHandler> {

        /// <summary>
        /// Public constructor that is injected with a context instance
        /// </summary>
        /// <param name="ctx">an EF context</param>
        public BlogsController(BloggingContext ctx) : base(ctx) {
        }

		[Produces(typeof(IEnumerable<CompositeBlog>))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet]
        public async Task<IActionResult> GetBlogsAsync([FromQuery] int? top, [FromQuery] int? skip, [FromQuery] string expansions) {
            var results = await Handler().GetBlogsWithExpansion(Context, null, top ?? DefaultTop, skip ?? DefaultSkip, expansions.ExplodeExpansion());
            return FormResult(results);
        }

		[Produces(typeof(CompositeBlog))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
		[ProducesResponseType(typeof(void), (int) HttpStatusCode.NotFound)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetBlogAsync(int id, [FromQuery] string expansions) {
            return FormResult(await GetBlog(id, expansions));
        }

				
		[Produces(typeof(IEnumerable<Post>))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
		[ProducesResponseType(typeof(void), (int) HttpStatusCode.NotFound)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet("{id}/Posts")]
		public async Task<IActionResult> GetPostsAsync(int id) {
			return FormResult((await GetBlog(id, "Posts")).Posts);
		}

				
		[Produces(typeof(Party))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
		[ProducesResponseType(typeof(void), (int) HttpStatusCode.NotFound)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet("{id}/Author")]
		public async Task<IActionResult> GetAuthorAsync(int id) {
			return FormResult((await GetBlog(id, "Author")).Author);
		}

				
		[Produces(typeof(IEnumerable<Party>))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
		[ProducesResponseType(typeof(void), (int) HttpStatusCode.NotFound)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet("{id}/Readers")]
		public async Task<IActionResult> GetReadersAsync(int id) {
			return FormResult((await GetBlog(id, "Readers")).Readers);
		}

		
		private async Task<CompositeBlog> GetBlog(int id, string expansions) { 
			var predicate = CreatePredicate<Blog>(id, "BlogId");
            return await Handler().GetBlogWithExpansion(Context, predicate, expansions.ExplodeExpansion());
		}

	}
 }
 #endregion

#region Posts

 namespace Complex.Omnibus.Autogenerated.ExpansionHandling.Posts { 

    [Route("api/[controller]")]
    public class PostsController : BaseController<PostsQueryHandler> {

        /// <summary>
        /// Public constructor that is injected with a context instance
        /// </summary>
        /// <param name="ctx">an EF context</param>
        public PostsController(BloggingContext ctx) : base(ctx) {
        }

		[Produces(typeof(IEnumerable<CompositePost>))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet]
        public async Task<IActionResult> GetPostsAsync([FromQuery] int? top, [FromQuery] int? skip, [FromQuery] string expansions) {
            var results = await Handler().GetPostsWithExpansion(Context, null, top ?? DefaultTop, skip ?? DefaultSkip, expansions.ExplodeExpansion());
            return FormResult(results);
        }

		[Produces(typeof(CompositePost))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
		[ProducesResponseType(typeof(void), (int) HttpStatusCode.NotFound)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetPostAsync(int id, [FromQuery] string expansions) {
            return FormResult(await GetPost(id, expansions));
        }

				
		[Produces(typeof(IEnumerable<Party>))]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.NoContent)]
		[ProducesResponseType(typeof(void), (int) HttpStatusCode.NotFound)]
        [ProducesResponseType(typeof(void), (int) HttpStatusCode.InternalServerError)]
        [HttpGet("{id}/Readers")]
		public async Task<IActionResult> GetReadersAsync(int id) {
			return FormResult((await GetPost(id, "Readers")).Readers);
		}

		
		private async Task<CompositePost> GetPost(int id, string expansions) { 
			var predicate = CreatePredicate<Post>(id, "PostId");
            return await Handler().GetPostWithExpansion(Context, predicate, expansions.ExplodeExpansion());
		}

	}
 }
 #endregion

//
// Source DSL
// This is the content of the DSL type file that generated the above code
//
// {
//   "context": { },
//   "allDefinitions": [
//     {
//       "tag": "Blogs",
//       "singular": "Blog",
//       "model": "Blog",
//       "queryDetails": {
//         "query": "(await ctx.Blogs\r\n.AsNoTracking()\r\n.Where(expr)\r\n.Select(b => new { Blog = b })\r\n{joins}\r\n{extraWhere}\r\n.OrderBy(a => a.Blog.BlogId)\r\n.Skip(skip)\r\n.Take(top)\r\n.ToListAsync())",
//         "restResourceIdProperty": "BlogId",
//         "restResourceIdPropertyType": "int"
//       },
//       "rawExpansions": {
//         "Posts": {
//           "type": "IEnumerable<Post>",
//           "join": ".GroupJoin(ctx.Posts, a => a.Blog.NonKeyField, post => post.NonKeyField, {selector})"
//         },
//         "Author": {
//           "type": "Party",
//           "join": ".Join(ctx.Parties, a => a.Blog.NonKeyField, party => party.NonKeyField, {selector})",
//           "predicate": ".Where(p => p.Author.Disposition == \"author\")"
//         },
//         "Readers": {
//           "type": "IEnumerable<Party>",
//           "join": ".GroupJoin(ctx.Parties.Where(r => r.Disposition == \"reader\"), a => a.Blog.NonKeyField, party => party.NonKeyField, {selector})"
//         }
//       }
//     },
//     {
//       "tag": "Posts",
//       "singular": "Post",
//       "model": "Post",
//       "queryDetails": {
//         "query": "(await ctx.Posts\r\n.AsNoTracking()\r\n.Where(expr)\r\n.Select(p => new { Post = p })\r\n{joins}\r\n{extraWhere}\r\n.OrderBy(a => a.Post.PostId)\r\n.Skip(skip)\r\n.Take(top)\r\n.ToListAsync())",
//         "restResourceIdProperty": "PostId",
//         "restResourceIdPropertyType": "int"
//       },
//       "rawExpansions": {
//         "Readers": {
//           "type": "IEnumerable<Party>",
//           "join": ".GroupJoin(ctx.Parties.Where(r => r.Disposition == \"reader\"), a => a.Post.NonKeyField, party => party.NonKeyField, {selector})"
//         }
//       }
//     }
//   ]
// }

